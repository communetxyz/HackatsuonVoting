name: Deploy to Holesky Testnet

on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      verify:
        description: 'Verify contract on block explorer'
        required: false
        default: 'true'
        type: boolean

jobs:
  deploy-testnet:
    name: Deploy to Holesky
    runs-on: ubuntu-latest
    environment: testnet
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: forge install

      - name: Build contracts
        run: |
          forge clean
          forge build

      - name: Deploy HackathonVoting
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          HOLESKY_RPC_URL: ${{ secrets.HOLESKY_RPC_URL }}
          PRIZE_TOKEN_ADDRESS: "0x3f1c547b21f65e10480de3ad8e19faac46c95034"
          PRIZE_AMOUNT: "3"
        run: |
          echo "Deploying HackathonVoting to Holesky testnet..."
          echo "Prize Token: $PRIZE_TOKEN_ADDRESS"
          echo "Prize Amount: $PRIZE_AMOUNT"

          DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol:DeployScript \
            --rpc-url $HOLESKY_RPC_URL \
            --broadcast \
            --slow \
            -vvvv)

          echo "$DEPLOY_OUTPUT"

          # Extract contract address from deployment output (from Logs section, not traces)
          CONTRACT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "^  HackathonVoting deployed to:" | awk '{print $NF}')

          echo "contract_address=$CONTRACT_ADDRESS" >> $GITHUB_OUTPUT
          echo "Deployed to: $CONTRACT_ADDRESS"

      - name: Verify contract
        if: ${{ github.event.inputs.verify != 'false' }}
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          echo "Verifying HackathonVoting contract on Etherscan..."
          echo "Waiting 30 seconds for transaction to propagate..."
          sleep 30

          forge verify-contract \
            --chain-id 17000 \
            --compiler-version v0.8.20 \
            --num-of-optimizations 200 \
            --evm-version paris \
            --skip-is-verified-check \
            --watch \
            --constructor-args $(cast abi-encode "constructor(address,uint256)" "0x3f1c547b21f65e10480de3ad8e19faac46c95034" "3") \
            ${{ steps.deploy.outputs.contract_address }} \
            src/HackathonVoting.sol:HackathonVoting \
            --etherscan-api-key $ETHERSCAN_API_KEY

      - name: Fund contract with prize tokens
        env:
          HOLESKY_RPC_URL: ${{ secrets.HOLESKY_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          PRIZE_TOKEN_ADDRESS: "0x3f1c547b21f65e10480de3ad8e19faac46c95034"
        run: |
          echo "Waiting for previous transactions to settle..."
          sleep 10

          echo "Transferring prize tokens to contract..."

          # Transfer 3 tokens to the contract for prize distribution
          cast send $PRIZE_TOKEN_ADDRESS \
            "transfer(address,uint256)" \
            ${{ steps.deploy.outputs.contract_address }} \
            3 \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $PRIVATE_KEY \
            --json > /dev/null

          sleep 5

          # Verify contract has the tokens
          CONTRACT_BALANCE=$(cast call $PRIZE_TOKEN_ADDRESS \
            "balanceOf(address)(uint256)" \
            ${{ steps.deploy.outputs.contract_address }} \
            --rpc-url $HOLESKY_RPC_URL)

          echo "Contract prize token balance: $CONTRACT_BALANCE"

      - name: Register test projects and vote
        id: test_projects
        env:
          HOLESKY_RPC_URL: ${{ secrets.HOLESKY_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          TEAM_ADDRESS: "0x86213f1cf0a501857B70Df35c1cb3C2EcF112844"
        run: |
          echo "Registering 3 mock projects for testing..."

          # Register all 3 projects in a single transaction using registerProjects
          CALLDATA=$(cast calldata \
            "registerProjects(string[],string[],string[],string[],string[],string[],string[],address[])" \
            '["AI-Powered Code Assistant","DeFi Yield Optimizer","Smart Home Energy Manager"]' \
            '["An intelligent code completion tool using GPT-4 to help developers write better code faster","Automatically find and optimize yield farming strategies across multiple DeFi protocols","IoT-based system that optimizes energy consumption in real-time using ML predictions"]' \
            '["CodeWizards","YieldHunters","EcoTech"]' \
            '["AI","Web3","IoT"]' \
            '["https://placeholder.com/ai-assistant.png","https://placeholder.com/defi-optimizer.png","https://placeholder.com/smart-home.png"]' \
            '["https://demo.codeassistant.dev","https://demo.yieldhunters.fi","https://demo.ecotechhome.io"]' \
            '["https://github.com/codewizards/ai-assistant","https://github.com/yieldhunters/optimizer","https://github.com/ecotech/energy-manager"]' \
            ["$TEAM_ADDRESS","$TEAM_ADDRESS","$TEAM_ADDRESS"])

          cast send ${{ steps.deploy.outputs.contract_address }} \
            "$CALLDATA" \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $PRIVATE_KEY \
            --json > /dev/null

          sleep 5

          # Verify project count
          PROJECT_COUNT=$(cast call ${{ steps.deploy.outputs.contract_address }} \
            "projectCount()(uint256)" \
            --rpc-url $HOLESKY_RPC_URL)

          echo "Total projects registered: $PROJECT_COUNT"

          # Vote for project 1 (first vote)
          cast send ${{ steps.deploy.outputs.contract_address }} \
            "vote(uint256)" \
            1 \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $PRIVATE_KEY \
            --json > /dev/null

          sleep 5

          # Vote for project 2 (second vote from same address)
          cast send ${{ steps.deploy.outputs.contract_address }} \
            "vote(uint256)" \
            2 \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $PRIVATE_KEY \
            --json > /dev/null

          sleep 5

          # Vote for project 3 (third vote from deployer address using a second voter)
          # Note: This requires a second private key to vote as different address
          # For now, we'll vote for project 3 from the same address using their 2-vote limit
          # Actually, we already used both votes (project 1 and 2), so we need to vote from contract owner
          # Let's just vote for project 3 from a cast send without using up our vote limit
          # Since we can't easily add a second voter in CI, let's add a third vote for project 3
          # by voting twice for project 1, once for project 2, and once for project 3 would need 2 addresses

          # Workaround: Create a new random wallet and use it to vote for project 3
          VOTER2_KEY=$(cast wallet new --json | jq -r '.private_key')

          # Fund the new voter with some ETH for gas (using owner account)
          cast send $(cast wallet address --private-key $VOTER2_KEY) \
            --value 0.01ether \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $PRIVATE_KEY \
            --json > /dev/null

          sleep 5

          # Vote for project 3 from second voter
          VOTE_TX=$(cast send ${{ steps.deploy.outputs.contract_address }} \
            "vote(uint256)" \
            3 \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $VOTER2_KEY \
            --json)

          VOTE_TX_HASH=$(echo $VOTE_TX | jq -r '.transactionHash')
          echo "vote_tx_hash=$VOTE_TX_HASH" >> $GITHUB_OUTPUT
          echo "Test vote cast: $VOTE_TX_HASH"

          sleep 5

          # Get total votes to verify
          TOTAL_VOTES=$(cast call ${{ steps.deploy.outputs.contract_address }} \
            "getTotalVotes()(uint256)" \
            --rpc-url $HOLESKY_RPC_URL)

          echo "Total votes: $TOTAL_VOTES"

      - name: Resolve voting and verify prize distribution
        id: resolve_voting
        env:
          HOLESKY_RPC_URL: ${{ secrets.HOLESKY_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          PRIZE_TOKEN_ADDRESS: "0x3f1c547b21f65e10480de3ad8e19faac46c95034"
          TEAM_ADDRESS: "0x86213f1cf0a501857B70Df35c1cb3C2EcF112844"
        run: |
          echo "Getting team balance before resolving..."
          BALANCE_BEFORE=$(cast call $PRIZE_TOKEN_ADDRESS \
            "balanceOf(address)(uint256)" \
            $TEAM_ADDRESS \
            --rpc-url $HOLESKY_RPC_URL)

          echo "Team balance before: $BALANCE_BEFORE"

          echo "Resolving voting and distributing prizes..."
          RESOLVE_TX=$(cast send ${{ steps.deploy.outputs.contract_address }} \
            "resolveVoting()" \
            --rpc-url $HOLESKY_RPC_URL \
            --private-key $PRIVATE_KEY \
            --json)

          RESOLVE_TX_HASH=$(echo $RESOLVE_TX | jq -r '.transactionHash')
          echo "resolve_tx_hash=$RESOLVE_TX_HASH" >> $GITHUB_OUTPUT
          echo "Voting resolved: $RESOLVE_TX_HASH"

          sleep 5

          # Get winner
          WINNER_ID=$(cast call ${{ steps.deploy.outputs.contract_address }} \
            "winnerProjectId()(uint256)" \
            --rpc-url $HOLESKY_RPC_URL)

          echo "Winner project ID: $WINNER_ID"

          # Get team balance after resolution
          BALANCE_AFTER=$(cast call $PRIZE_TOKEN_ADDRESS \
            "balanceOf(address)(uint256)" \
            $TEAM_ADDRESS \
            --rpc-url $HOLESKY_RPC_URL)

          echo "Team balance after: $BALANCE_AFTER"

          # Calculate expected prize (3 / 3 = 1 token per winner, all 3 projects received votes)
          # All 3 projects have votes, so all 3 get prizes (1 token each = 3 total)
          # All projects have same team address, so team should receive 3 tokens total
          EXPECTED_PRIZE=3
          ACTUAL_PRIZE=$((BALANCE_AFTER - BALANCE_BEFORE))

          echo "Expected prize distributed: $EXPECTED_PRIZE"
          echo "Actual prize distributed: $ACTUAL_PRIZE"

          if [ "$ACTUAL_PRIZE" -eq "$EXPECTED_PRIZE" ]; then
            echo "✅ Prize distribution verified successfully!"
          else
            echo "❌ Prize distribution mismatch!"
            exit 1
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Holesky Testnet Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Holesky (Ethereum Testnet)" >> $GITHUB_STEP_SUMMARY
          echo "**Chain ID:** 17000" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Contracts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Contract | Address | Explorer |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| HackathonVoting | \`${{ steps.deploy.outputs.contract_address }}\` | [View on Etherscan](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.contract_address }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Projects Registered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **AI-Powered Code Assistant** (AI) - by CodeWizards (1 vote)" >> $GITHUB_STEP_SUMMARY
          echo "2. **DeFi Yield Optimizer** (Web3) - by YieldHunters (1 vote)" >> $GITHUB_STEP_SUMMARY
          echo "3. **Smart Home Energy Manager** (IoT) - by EcoTech (1 vote)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Vote Transaction:** [\`${{ steps.test_projects.outputs.vote_tx_hash }}\`](https://holesky.etherscan.io/tx/${{ steps.test_projects.outputs.vote_tx_hash }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Resolve Transaction:** [\`${{ steps.resolve_voting.outputs.resolve_tx_hash }}\`](https://holesky.etherscan.io/tx/${{ steps.resolve_voting.outputs.resolve_tx_hash }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Prize Distribution:** ✅ Verified (3 tokens distributed: 1 to each top 3 project)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Save deployment artifacts
        run: |
          mkdir -p deployments/holesky

          cat > deployments/holesky/deployment.json << EOF
          {
            "network": "holesky",
            "chainId": 17000,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "GitHub Actions",
            "contracts": {
              "HackathonVoting": {
                "address": "${{ steps.deploy.outputs.contract_address }}",
                "explorer": "https://holesky.etherscan.io/address/${{ steps.deploy.outputs.contract_address }}"
              }
            }
          }
          EOF

          cat deployments/holesky/deployment.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: holesky-deployment
          path: deployments/holesky/

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const contractAddress = '${{ steps.deploy.outputs.contract_address }}';
            const explorerUrl = `https://holesky.etherscan.io/address/${contractAddress}`;

            const comment = `## 🚀 Holesky Testnet Deployment

            **Network:** Holesky (Ethereum Testnet)
            **Chain ID:** 17000

            ### Deployed Contracts

            | Contract | Address | Explorer |
            | --- | --- | --- |
            | HackathonVoting | \`${contractAddress}\` | [View on Etherscan](${explorerUrl}) |

            ### Interact with Contract

            \`\`\`bash
            # Register a project (owner only)
            cast send ${contractAddress} \\
              "registerProject(string,string,string,string,string,string,string,address)" \\
              "Test Project" \\
              "A test project" \\
              "Test Team" \\
              "AI" \\
              "https://image.url" \\
              "https://demo.url" \\
              "https://github.url" \\
              "0xYourTeamAddress" \\
              --rpc-url https://1rpc.io/holesky \\
              --private-key $PRIVATE_KEY

            # Vote for a project
            cast send ${contractAddress} \\
              "vote(uint256)" \\
              1 \\
              --rpc-url https://1rpc.io/holesky \\
              --private-key $PRIVATE_KEY

            # Get voting data
            cast call ${contractAddress} \\
              "getVotingData(address)" \\
              <YOUR_ADDRESS> \\
              --rpc-url https://ethereum-holesky-rpc.publicnode.com
            \`\`\`

            **Deployment Time:** ${new Date().toISOString()}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
